#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
This module does ... what ? 
"""
import numpy as np 
import xarray as xr 
import os 

from datetime import datetime
from scipy.stats import linregress

def generate_ds_from_rawdata(df, metadata):
    '''process_raw_respiro_df does the cleaning and preparation of raw (and segmented per speed) and store it into a easy to use xarray dataset 

    Parameters
    ----------
    df : pd.Dataframe
        DF that you can get from the loader.py function, especially loader.load_and_segment_rawdata
    metadata : SimpleNamespace 
        Metadata info save via loader.load_and_segment_rawdata 

    Returns
    -------
    ds : xarray Dataset
        a clean xarray Dataset with right dimensions and right names for variables 
    '''

    temperature = df['Temp Â°C']

    # in hours
    time = df.index * metadata.dt

    # in mg
    oxy_consumed = (df['ODO mg/L'][0] - df['ODO mg/L']) * metadata.tank_volume

    ###########
    metadata.date = datetime.strptime(
        df['Date (MM/DD/YYYY)'][0], "%m/%d/%Y").strftime("%Y-%m-%d")
    attrs = vars(metadata)

    data_vars = dict(
        oxy_consumed=(['time'], oxy_consumed),
        temperature=(['time'], temperature),
        t_exp=(['speed'], metadata.t_exp[:-1]),
        i_exp=(['speed'], metadata.i_exps)
    )

    coords = dict(
        time=(['time'], time),
        speed=(['speed'], metadata.speeds)
    )

    if hasattr(metadata, "m_fish"):
        data_vars['mass_fish'] = (['fish'], metadata.m_fish)
        coords['fish'] = (['fish'], np.arange(metadata.n_fish))
        coords['number_of_fish'] = (['number_of_fish'], np.array([metadata.n_fish]))
    else :
        coords['number_of_fish']=(['number_of_fish'], np.array([0]))

    ds = xr.Dataset(data_vars, coords, attrs)
    ds = extract_metabolic_rate_per_segment(ds)

    return ds


def extract_metabolic_rate_per_segment(ds):
    '''extract_metabolic_rate_per_segment : compute a slope (metabolic rate) for each segment of experiment (each speed tested)

    Parameters
    ----------
    ds : xarray Dataset
        a full dataset builded from process_raw_respiro_df

    Returns
    -------
    xarray Dataset 
        Same DS but with new variables in the 'speed' dimension
    '''

    slopes = np.zeros(ds.n_exp, dtype=np.float32)
    slopes_std = np.zeros(ds.n_exp, dtype=np.float32)

    for i, i0 in enumerate(ds.i_exps):
        # in mg/s
        slope, _, _, _, std_err = linregress(
            ds.time[i0:i0+ds.pts_per_exp], ds.oxy_consumed[i0:i0+ds.pts_per_exp])
            
        slopes[i] = slope
        slopes_std[i] = std_err

    # in mg/hour/kg of fish
    if ds.number_of_fish == 0: 
        metabolic_rate_segmented = slopes * 3600 
        metabolic_rate_segmented_error = slopes_std * 3600
    else:
        metabolic_rate_segmented = slopes * 3600 / ds.number_of_fish.to_numpy() #(np.sum(ds.mass_fish.to_numpy()) / 1000)**0.9
        metabolic_rate_segmented_error = slopes_std * 3600 / ds.number_of_fish.to_numpy() #(np.sum(ds.mass_fish.to_numpy()) / 1000)**0.9

    ds['metabolic_rate_segmented_error'] = (
        ['speed'], metabolic_rate_segmented_error)
    ds['metabolic_rate_segmented'] = (['speed'], metabolic_rate_segmented)

    return ds

def save_xarray_ds(ds, is_calibration, loc:str='./cleaned_data/respirometry/'):
    '''save_xarray_ds saves an dataset in a file in ./cleaned_data/ folder 

    Parameters
    ----------
    ds : xarray Dataset
        DS generated by generate_ds_from_rawdata
    loc : str
        path to cleaned data folder (optional, default is './cleaned_data/respirometry/')
    '''

    if is_calibration :
        file_name = f'{ds.date}_{ds.t_exp.to_numpy()[0][:2]}-{ds.t_exp.to_numpy()[0][3:5]}_calibration'
        loc = './cleaned_data/respiro_calibration/'
    else :
        file_name = f'{ds.date}_{ds.t_exp.to_numpy()[0][:2]}-{ds.t_exp.to_numpy()[0][3:5]}_{ds.n_fish:02d}fish'

    path_save_to = f'{loc}{file_name}.nc'
    
    if os.path.exists(path_save_to):
        os.remove(path_save_to)
    
    print(f'\nSaving the dataset under : \n\t{path_save_to}')

    ds.to_netcdf(path_save_to, mode='w')
    ds.close()
    
    print('Saving done') 

def pd2xarray(raw_df, metadata, is_calibration):
    '''pd2xarray is a wrapper that saves cleaned data with attached metadata attributeas an xarray Dataset object in a .nc file

    Parameters
    ----------
    df : _type_
        _description_
    metadata : _type_
        _description_

    Returns
    -------
    xarray Dataset 
        
    '''

    print('\n***********************\nStart converting raw data to xarray dataset object')

    cleaned_ds = generate_ds_from_rawdata(raw_df, metadata)
    save_xarray_ds(cleaned_ds, is_calibration)

    return cleaned_ds

def apply_calibration(metabolic_rate_segmented):
    data_calibration = xr.load_dataset('cleaned_data/respiro_calibration/2022-06-23_11-20_00fish.nc')


